# input df is a data.table with gene in rows and samples in col. first col has to contain name of gene. var.list is extracted from first column
# time.event.data is data.frame with cols binary data (event) in col1 and time in col2. The row order has to match col order in df
# sub.idx has to be subset containg index on samples to subset on (e.g. 1,3,5). Example which(type == "highrisk")
coxph.parallell <- function(df, time.event.data, var.list = NULL, file = "test.txt", sub.idx = NULL, no_cores = "") {
    start = Sys.time()
    
     if (!is.null(sub.idx)) {
        df <- df[, c(1, sub.idx+1), with = F]
        time.event.data <- time.event.data[sub.idx, ]
    }
    
    colnames(time.event.data) <- c("event", "time")
    colnames(df)[1] <- "var"
    setkey(df, var)
    
    if (is.null(var.list)) {
        var.list <- df$var
    }

    if (no_cores == "") {
        no_cores <- detectCores() - 1
        registerDoParallel(no_cores)
    }
    
    # Creates and overwrites file if it already exists
    dir.create(dirname(file), showWarnings = F)
    file.create(file, overwrite = T)
    
    nr_times = floor(nrow(df) / no_cores) - 1
    remainder = nrow(df) %% no_cores
    
    ## Clean-up any existing temp files
     for (i in 1:(no_cores+1)) {
        tryCatch(unlink(paste(file, i, "temp.txt", sep = "_"), force = T))
    }
    
    for (i in 0:nr_times) {
        foreach (z = 1:no_cores,
                 .combine = rbind)  %dopar%
                 {
            name = var.list[((i * no_cores) + z)] # contains name
            t1 <- df[name, 2:ncol(df)] # contains only binary 
            case.table = table(unlist(t1)) # how many yes no 
            survdata <- cbind(time.event.data, t(t1))
            colnames(survdata) <- c("event", "time", "var")
            
            res.cox <- coxph(Surv(time, event) ~ var, data = survdata, na.action = na.omit)
            chi.sq.p <- cox.zph(res.cox) # test the proportional hazards assumption of cox regression
            
            s <- summary(res.cox)
            
            res <- list(var=name, 
                n=sum(case.table), 
                yes=round(case.table[2]/sum(case.table),2)*100, 
                no=round(case.table[1]/sum(case.table),2)*100, 
                estimate = round(s$coefficients[1,1],2), 
                se.coef=round(s$coefficients[1,3],2), 
                hazard.ratio=round(s$coefficients[1,2],2), 
                zvalue=round(s$coefficients[1,4],2), 
                p.wald=signif(s$coefficients[1,5], 3),  
                p.lrt = signif(s$logtest[3], 3),
                p.logrank = signif(s$sctest[3], 3),
                rsq=round(s$rsq[1], 3),
                concordance = round(s$concordance[1], 2),
                concordance.se = round(s$concordance[2], 2),
                CI.lower = round(s$conf.int[3],2), 
                CI.upper = round(s$conf.int[4],2),
                chi.sq.p = signif(chi.sq.p$table[3], 3))
            
            # if var is continous we removed the number of yes's and no's
            if (length(table(unlist(t1))) != 2) res$yes <- NULL
            if (length(table(unlist(t1))) != 2) res$no <- NULL
            
            cat(unlist(res), sep ="\t", file = paste(file, z, "temp.txt", sep = "_"), append = T) # add tab and newline, then append to file
            cat("", sep ="\n", file = paste(file, z, "temp.txt", sep = "_"), append = T) # add tab and newline, then append to file
                 }
            }
    
    
        if (remainder != 0) {
                z <- length(grep(paste(file, ".", "temp.txt", sep = "_"), list.files(dirname(file), full.names = T))) + 1
            
                file.rem = paste(file, z, "temp.txt", sep = "_")
            
                # add in the rest
                for (i in 1:remainder) {
                
            name = var.list[((nr_times + 1) * no_cores) + i] # contains name
            t1 <- df[name, 2:ncol(df)] # contains only binary 
            case.table = table(unlist(t1)) # how many yes no 
            survdata <- cbind(time.event.data, t(t1))
            colnames(survdata) <- c("event", "time", "var")
            
            res.cox <- coxph(Surv(time, event) ~ var, data = survdata, na.action = na.omit)
            chi.sq.p <- cox.zph(res.cox) # test the proportional hazards assumption of cox regression
            s <- summary(res.cox)
            
            res <- list(var=name, 
                n=sum(case.table), 
                yes=round(case.table[2]/sum(case.table),2)*100, 
                no=round(case.table[1]/sum(case.table),2)*100, 
                estimate = round(s$coefficients[1,1],2), 
                se.coef=round(s$coefficients[1,3],2), 
                hazard.ratio=round(s$coefficients[1,2],2), 
                zvalue=round(s$coefficients[1,4],2), 
                p.wald=signif(s$coefficients[1,5], 3),  
                p.lrt = signif(s$logtest[3], 3),
                p.logrank = signif(s$sctest[3], 3),
                rsq=round(s$rsq[1], 3),
                concordance = round(s$concordance[1], 2),
                concordance.se = round(s$concordance[2], 2),
                CI.lower = round(s$conf.int[3],2), 
                CI.upper = round(s$conf.int[4],2),
                chi.sq.p = signif(chi.sq.p$table[3], 3)
                )
                
            # if var is continous we removed the number of yes's and no's
            if (length(table(unlist(t1))) != 2) res$yes <- NULL
            if (length(table(unlist(t1))) != 2) res$no <- NULL
            
            cat(unlist(res), sep ="\t", file = file.rem, append = T) # add tab and newline, then append to file
            cat("", sep ="\n", file = file.rem, append = T) # add tab and newline, then append to file
                
            }
        } 
    
    stopImplicitCluster()
    
    # file.cat <- gsub(paste(z, "temp.txt", sep = "_"), "*_temp.txt", file.rem)
    file.cat <- paste(file, '*', "temp.txt", sep = "_")
    
    cat("\nNumber of correlations in temp files:\n")
    tryCatch(system(paste("wc -l", file.cat)))
    
    cat(paste("\nNumber of variables provided to this function:", length(var.list)))
    
    ## combine all files 
    system(paste("cat", file.cat, ">", file))
    ## clean up temp files
    unlink(file.cat, force = T)

    cat(paste("\nNumber of correlations in final file:\n", system(paste("wc -l", file), intern = T)))
    
    end = Sys.time()
    time = round((end - start), 2)
    cat(paste("\nFinished in", time, units(time)))
}


plot.surv <- function(genename, clindata, counts, sub.idx = NULL) {
    
    if (!is.null(sub.idx)) {
        counts <- counts[, c(1, sub.idx+1), with = F]
        clindata <- clindata[sub.idx, ]
    }
    
    
    colnames(counts)[1] <- "ensembl_gene_id"
    survdata <- cbind(clindata, t(counts[counts$ensembl_gene_id == hugo2ensg(genename)[1,2], 2:ncol(counts)]))
    colnames(survdata) <- c("sbin", "time", "var")
    cl <-  K_means_clustering(survdata[,3], 2)
    survdata <- cbind(survdata[order(survdata[,3]), ], cl[order(cl[,1]), "fit.cluster"])
    colnames(survdata)[4] <- "bin"
    if(mean(unlist(survdata[survdata$bin == 1, "var"])) > mean(unlist(survdata[survdata$bin == 2, "var"]))) {
        survdata$bin <- gsub("1", "HIGH", survdata$bin) 
        survdata$bin <- gsub("2", "LOW", survdata$bin)
    } else {
        survdata$bin <- gsub("1", "LOW", survdata$bin) 
        survdata$bin <- gsub("2", "HIGH", survdata$bin)
}

    survdata$bin <- factor(survdata$bin, levels = c("LOW", "HIGH"))
    print(table(survdata$bin))
    fit <- survfit(Surv(time, sbin) ~ bin, data = survdata, na.action = na.omit)
    
    print(coxph(Surv(time, sbin) ~ bin, data = survdata, na.action = na.omit))
    
    ggsurvplot(fit, combine = F, censor = FALSE, palette = "jco", font.main = 18, font.x = 18, font.y = 18, font.tickslab = 18, font.legend = 18, legend = "bottom") # + ggtitle(paste(name, ", pvalue = ", res$p, ", hazard ratio = ", res$hazard.ratio, ", conf = ", paste(res$CI.lower, ",", res$CI.upper, sep = ""), sep = ""))
}
